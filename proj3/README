OS Proj3 Notes
 
 Current Issues: Implementing Semaphores
 
 I initialized my semaphore and that was it. All the other tests appear to be working. It's important to note that I used an array for my semaphores instead of a pointer because pointers are confusing:(
 
I commented out the most of the semaphore functions because they made me fail the start routine test. But I left what i attempted to implement.

 
 
 
Goal: Extend library to facilitate communication between threads

- locking mecahnism: switch interactivity of a thread on/off to prevent thread from being interrupted 
            - like when youre manipulating global data structs (list of running threads)

 	1. void lock() : thread cannot be interrupted
 	2. void unlock() : thread resumes normal state and scheduled whe alarm signal is received
   
	note: thread only calls unlock when it has previously performed lock
	    : result of calling lock twice without invoking unlock is undefined

- pthread_join POSIX thread function
	int pthread_join(pthread_t thread, void **value_ptr);

	postpones execution of thread that initiated the call until target thread terminates (unless target already terminated). Now you need to handle the exit code of threads that termiante. 
	
	on return from pthread_join call with a non-NULL value_ptr argument, the value passed to pthread_exit (by terminating thread) is from the location referenced by value_ptr.
	
	note: the results from multiple/simultaneous calls to pthread_join               
	    : specifying same target thread will be undefined

- add semaphore support to library
	coordinate interactions between multiple threads

	1. int sem_init (sem_t *sem, int pshared, unsigned value)
	
initializes unnamed semphore -- aka sem. Pshared always equals 0, meaning that the semaphore pointed to by sem is shared between trheads of a process. 
	
	note: initialzing a thread again is undefined

	2. int sem_wait(sem_t *sem)

decrements (locks) semaphore pointed to by sem. If the semaphore value is greater tan 0, the decrement proceeds, and function returns. If semahpore value is 0, the call blocks until it is possible to decrement (i.e. the semaphore value becomes greater than 0). 

	note: it will never be below zero

	3. int sem_post(sem_t *sem)

increment (unlocks) semaphore pointed to by sem. If the semaphore's value consequently becomes greater than zero, then another thread blocked in sem_wait will be "woken up" and proceeds to lock the semaphore.

	note: when a thread is woken up and takes the lock as part of sem_post, teh value of semphore remains zero.

	4. int sem_destory(sem_t *sem)

destroys semaphore specified address, meaning that only a semaphore initialized by sem_init should be destroyed using sem_destroy.
	
	note: destroying a semaphore tha tother threads are currently blocked on (in sem_wait for example) is undefined. 
	    : using a semaphore that has been destroyed is undefined until the semaphore has been reinitialized using sem_init.

